/*
 * This file is generated by jOOQ.
 */
package kr.co.commerce.common.jooq.generated.tables.records


import java.time.LocalDateTime

import kr.co.commerce.common.jooq.generated.tables.JMember
import kr.co.commerce.common.jooq.generated.tables.pojos.Member

import org.jooq.Record1
import org.jooq.impl.UpdatableRecordImpl


/**
 * 고객 테이블
 */
@Suppress("UNCHECKED_CAST")
open class MemberRecord private constructor() : UpdatableRecordImpl<MemberRecord>(JMember.MEMBER) {

    open var seq: Long?
        set(value): Unit = set(0, value)
        get(): Long? = get(0) as Long?

    open var name: String
        set(value): Unit = set(1, value)
        get(): String = get(1) as String

    open var email: String
        set(value): Unit = set(2, value)
        get(): String = get(2) as String

    open var password: String
        set(value): Unit = set(3, value)
        get(): String = get(3) as String

    open var gradeCode: String
        set(value): Unit = set(4, value)
        get(): String = get(4) as String

    open var createdBy: String
        set(value): Unit = set(5, value)
        get(): String = get(5) as String

    open var createdTime: LocalDateTime?
        set(value): Unit = set(6, value)
        get(): LocalDateTime? = get(6) as LocalDateTime?

    open var updatedBy: String
        set(value): Unit = set(7, value)
        get(): String = get(7) as String

    open var updatedTime: LocalDateTime?
        set(value): Unit = set(8, value)
        get(): LocalDateTime? = get(8) as LocalDateTime?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<Long?> = super.key() as Record1<Long?>

    /**
     * Create a detached, initialised MemberRecord
     */
    constructor(seq: Long? = null, name: String, email: String, password: String, gradeCode: String, createdBy: String, createdTime: LocalDateTime? = null, updatedBy: String, updatedTime: LocalDateTime? = null): this() {
        this.seq = seq
        this.name = name
        this.email = email
        this.password = password
        this.gradeCode = gradeCode
        this.createdBy = createdBy
        this.createdTime = createdTime
        this.updatedBy = updatedBy
        this.updatedTime = updatedTime
        resetChangedOnNotNull()
    }

    /**
     * Create a detached, initialised MemberRecord
     */
    constructor(value: Member?): this() {
        if (value != null) {
            this.seq = value.seq
            this.name = value.name
            this.email = value.email
            this.password = value.password
            this.gradeCode = value.gradeCode
            this.createdBy = value.createdBy
            this.createdTime = value.createdTime
            this.updatedBy = value.updatedBy
            this.updatedTime = value.updatedTime
            resetChangedOnNotNull()
        }
    }
}
