/*
 * This file is generated by jOOQ.
 */
package kr.co.commerce.common.jooq.generated.tables.daos


import java.time.LocalDateTime

import kotlin.collections.List

import kr.co.commerce.common.jooq.generated.tables.JMemberLoginHistory
import kr.co.commerce.common.jooq.generated.tables.pojos.MemberLoginHistory
import kr.co.commerce.common.jooq.generated.tables.records.MemberLoginHistoryRecord

import org.jooq.Configuration
import org.jooq.impl.DAOImpl


/**
 * 고객 로그인 이력 테이블
 */
@Suppress("UNCHECKED_CAST")
open class MemberLoginHistoryDao(configuration: Configuration?) : DAOImpl<MemberLoginHistoryRecord, MemberLoginHistory, Long>(JMemberLoginHistory.MEMBER_LOGIN_HISTORY, MemberLoginHistory::class.java, configuration) {

    /**
     * Create a new MemberLoginHistoryDao without any configuration
     */
    constructor(): this(null)

    override fun getId(o: MemberLoginHistory): Long? = o.seq

    /**
     * Fetch records that have <code>seq BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfJSeq(lowerInclusive: Long?, upperInclusive: Long?): List<MemberLoginHistory> = fetchRange(JMemberLoginHistory.MEMBER_LOGIN_HISTORY.SEQ, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>seq IN (values)</code>
     */
    fun fetchByJSeq(vararg values: Long): List<MemberLoginHistory> = fetch(JMemberLoginHistory.MEMBER_LOGIN_HISTORY.SEQ, *values.toTypedArray())

    /**
     * Fetch a unique record that has <code>seq = value</code>
     */
    fun fetchOneByJSeq(value: Long): MemberLoginHistory? = fetchOne(JMemberLoginHistory.MEMBER_LOGIN_HISTORY.SEQ, value)

    /**
     * Fetch records that have <code>member_seq BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfJMemberSeq(lowerInclusive: Long, upperInclusive: Long): List<MemberLoginHistory> = fetchRange(JMemberLoginHistory.MEMBER_LOGIN_HISTORY.MEMBER_SEQ, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>member_seq IN (values)</code>
     */
    fun fetchByJMemberSeq(vararg values: Long): List<MemberLoginHistory> = fetch(JMemberLoginHistory.MEMBER_LOGIN_HISTORY.MEMBER_SEQ, *values.toTypedArray())

    /**
     * Fetch records that have <code>created_by BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfJCreatedBy(lowerInclusive: String, upperInclusive: String): List<MemberLoginHistory> = fetchRange(JMemberLoginHistory.MEMBER_LOGIN_HISTORY.CREATED_BY, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>created_by IN (values)</code>
     */
    fun fetchByJCreatedBy(vararg values: String): List<MemberLoginHistory> = fetch(JMemberLoginHistory.MEMBER_LOGIN_HISTORY.CREATED_BY, *values)

    /**
     * Fetch records that have <code>created_time BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfJCreatedTime(lowerInclusive: LocalDateTime?, upperInclusive: LocalDateTime?): List<MemberLoginHistory> = fetchRange(JMemberLoginHistory.MEMBER_LOGIN_HISTORY.CREATED_TIME, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>created_time IN (values)</code>
     */
    fun fetchByJCreatedTime(vararg values: LocalDateTime): List<MemberLoginHistory> = fetch(JMemberLoginHistory.MEMBER_LOGIN_HISTORY.CREATED_TIME, *values)
}
