/*
 * This file is generated by jOOQ.
 */
package kr.co.commerce.common.jooq.generated.tables


import java.time.LocalDateTime

import kotlin.collections.Collection
import kotlin.collections.List

import kr.co.commerce.common.jooq.generated.JStore
import kr.co.commerce.common.jooq.generated.keys.KEY_MEMBER_PRIMARY
import kr.co.commerce.common.jooq.generated.keys.KEY_MEMBER_UK_MEMBER_EMAIL
import kr.co.commerce.common.jooq.generated.keys.MEMBER_LOGIN_HISTORY_IBFK_1
import kr.co.commerce.common.jooq.generated.tables.JMemberLoginHistory.MemberLoginHistoryPath
import kr.co.commerce.common.jooq.generated.tables.records.MemberRecord

import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.Path
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * 고객 테이블
 */
@Suppress("UNCHECKED_CAST")
open class JMember(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, MemberRecord>?,
    parentPath: InverseForeignKey<out Record, MemberRecord>?,
    aliased: Table<MemberRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<MemberRecord>(
    alias,
    JStore.STORE,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment("고객 테이블"),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>store.member</code>
         */
        val MEMBER: JMember = JMember()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<MemberRecord> = MemberRecord::class.java

    /**
     * The column <code>store.member.seq</code>. 회원 일련번호
     */
    val SEQ: TableField<MemberRecord, Long?> = createField(DSL.name("seq"), SQLDataType.BIGINT.nullable(false).identity(true), this, "회원 일련번호")

    /**
     * The column <code>store.member.name</code>. 사용자명
     */
    val NAME: TableField<MemberRecord, String?> = createField(DSL.name("name"), SQLDataType.VARCHAR(30).nullable(false), this, "사용자명")

    /**
     * The column <code>store.member.email</code>. 사용자 이메일
     */
    val EMAIL: TableField<MemberRecord, String?> = createField(DSL.name("email"), SQLDataType.VARCHAR(100).nullable(false), this, "사용자 이메일")

    /**
     * The column <code>store.member.password</code>. 비밀번호
     */
    val PASSWORD: TableField<MemberRecord, String?> = createField(DSL.name("password"), SQLDataType.VARCHAR(100).nullable(false), this, "비밀번호")

    /**
     * The column <code>store.member.grade_code</code>. 등급
     */
    val GRADE_CODE: TableField<MemberRecord, String?> = createField(DSL.name("grade_code"), SQLDataType.VARCHAR(255).nullable(false), this, "등급")

    /**
     * The column <code>store.member.created_by</code>. 생성자
     */
    val CREATED_BY: TableField<MemberRecord, String?> = createField(DSL.name("created_by"), SQLDataType.VARCHAR(100).nullable(false), this, "생성자")

    /**
     * The column <code>store.member.created_time</code>. 생성일
     */
    val CREATED_TIME: TableField<MemberRecord, LocalDateTime?> = createField(DSL.name("created_time"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "생성일")

    /**
     * The column <code>store.member.updated_by</code>. 수정자
     */
    val UPDATED_BY: TableField<MemberRecord, String?> = createField(DSL.name("updated_by"), SQLDataType.VARCHAR(100).nullable(false), this, "수정자")

    /**
     * The column <code>store.member.updated_time</code>. 수정일
     */
    val UPDATED_TIME: TableField<MemberRecord, LocalDateTime?> = createField(DSL.name("updated_time"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "수정일")

    private constructor(alias: Name, aliased: Table<MemberRecord>?): this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<MemberRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<MemberRecord>?, where: Condition?): this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>store.member</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>store.member</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>store.member</code> table reference
     */
    constructor(): this(DSL.name("member"), null)

    constructor(path: Table<out Record>, childPath: ForeignKey<out Record, MemberRecord>?, parentPath: InverseForeignKey<out Record, MemberRecord>?): this(Internal.createPathAlias(path, childPath, parentPath), path, childPath, parentPath, MEMBER, null, null)

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    open class MemberPath : JMember, Path<MemberRecord> {
        constructor(path: Table<out Record>, childPath: ForeignKey<out Record, MemberRecord>?, parentPath: InverseForeignKey<out Record, MemberRecord>?): super(path, childPath, parentPath)
        private constructor(alias: Name, aliased: Table<MemberRecord>): super(alias, aliased)
        override fun `as`(alias: String): MemberPath = MemberPath(DSL.name(alias), this)
        override fun `as`(alias: Name): MemberPath = MemberPath(alias, this)
        override fun `as`(alias: Table<*>): MemberPath = MemberPath(alias.qualifiedName, this)
    }
    override fun getSchema(): Schema? = if (aliased()) null else JStore.STORE
    override fun getIdentity(): Identity<MemberRecord, Long?> = super.getIdentity() as Identity<MemberRecord, Long?>
    override fun getPrimaryKey(): UniqueKey<MemberRecord> = KEY_MEMBER_PRIMARY
    override fun getUniqueKeys(): List<UniqueKey<MemberRecord>> = listOf(KEY_MEMBER_UK_MEMBER_EMAIL)

    private lateinit var _memberLoginHistory: MemberLoginHistoryPath

    /**
     * Get the implicit to-many join path to the
     * <code>store.member_login_history</code> table
     */
    fun memberLoginHistory(): MemberLoginHistoryPath {
        if (!this::_memberLoginHistory.isInitialized)
            _memberLoginHistory = MemberLoginHistoryPath(this, null, MEMBER_LOGIN_HISTORY_IBFK_1.inverseKey)

        return _memberLoginHistory;
    }

    val memberLoginHistory: MemberLoginHistoryPath
        get(): MemberLoginHistoryPath = memberLoginHistory()
    override fun `as`(alias: String): JMember = JMember(DSL.name(alias), this)
    override fun `as`(alias: Name): JMember = JMember(alias, this)
    override fun `as`(alias: Table<*>): JMember = JMember(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): JMember = JMember(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): JMember = JMember(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): JMember = JMember(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): JMember = JMember(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): JMember = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): JMember = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): JMember = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): JMember = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): JMember = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): JMember = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): JMember = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): JMember = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): JMember = where(DSL.notExists(select))
}
